
stoneMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000d8e  00000e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800070  00800070  00000e32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001059  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000687  00000000  00000000  00001fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001013  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000649  00000000  00000000  00003750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eed  00000000  00000000  00003d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004c86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
   2:	8b c0       	rjmp	.+278    	; 0x11a <__vector_1>
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	6f c0       	rjmp	.+222    	; 0xe6 <__bad_interrupt>
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	6d c0       	rjmp	.+218    	; 0xe6 <__bad_interrupt>
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	6b c0       	rjmp	.+214    	; 0xe6 <__bad_interrupt>
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	69 c0       	rjmp	.+210    	; 0xe6 <__bad_interrupt>
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	67 c0       	rjmp	.+206    	; 0xe6 <__bad_interrupt>
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	65 c0       	rjmp	.+202    	; 0xe6 <__bad_interrupt>
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	63 c0       	rjmp	.+198    	; 0xe6 <__bad_interrupt>
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	61 c0       	rjmp	.+194    	; 0xe6 <__bad_interrupt>
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	05 01       	movw	r0, r10
  28:	09 02       	muls	r16, r25
  2a:	a1 01       	movw	r20, r2
  2c:	09 01       	movw	r0, r18
  2e:	a1 00       	.word	0x00a1	; ????
  30:	05 09       	sbc	r16, r5
  32:	19 01       	movw	r2, r18
  34:	29 03       	fmul	r18, r17
  36:	15 00       	.word	0x0015	; ????
  38:	25 01       	movw	r4, r10
  3a:	95 03       	fmuls	r17, r21
  3c:	75 01       	movw	r14, r10
  3e:	81 02       	muls	r24, r17
  40:	95 01       	movw	r18, r10
  42:	75 05       	cpc	r23, r5
  44:	81 03       	fmuls	r16, r17
  46:	05 01       	movw	r0, r10
  48:	09 30       	cpi	r16, 0x09	; 9
  4a:	09 31       	cpi	r16, 0x19	; 25
  4c:	09 38       	cpi	r16, 0x89	; 137
  4e:	15 81       	ldd	r17, Z+5	; 0x05
  50:	25 7f       	andi	r18, 0xF5	; 245
  52:	75 08       	sbc	r7, r5
  54:	95 03       	fmuls	r17, r21
  56:	81 06       	cpc	r8, r17
  58:	c0 c0       	rjmp	.+384    	; 0x1da <didUnstuff1+0x2>

0000005a <usbDescriptorConfiguration>:
  5a:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  6a:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
  7a:	00 64                                               .d

0000007c <usbDescriptorDevice>:
  7c:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
  8c:	00 01                                               ..

0000008e <usbDescriptorStringDevice>:
  8e:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

0000009a <usbDescriptorStringVendor>:
  9a:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  aa:	74 00                                               t.

000000ac <usbDescriptorString0>:
  ac:	04 03 09 04                                         ....

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf e5       	ldi	r28, 0x5F	; 95
  b6:	d4 e0       	ldi	r29, 0x04	; 4
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	a0 e6       	ldi	r26, 0x60	; 96
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	ee e8       	ldi	r30, 0x8E	; 142
  c4:	fd e0       	ldi	r31, 0x0D	; 13
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
  c8:	05 90       	lpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a0 37       	cpi	r26, 0x70	; 112
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	a0 e7       	ldi	r26, 0x70	; 112
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a0 3b       	cpi	r26, 0xB0	; 176
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	91 d2       	rcall	.+1314   	; 0x606 <main>
  e4:	52 c6       	rjmp	.+3236   	; 0xd8a <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
  e8:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
  ea:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
  f0:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
  f2:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
  f4:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
  f6:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
  f8:	09 c0       	rjmp	.+18     	; 0x10c <usbCrcLoopEntry>

000000fa <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
  fa:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
  fc:	82 27       	eor	r24, r18

000000fe <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
  fe:	97 95       	ror	r25
    ror     resCrcL
 100:	87 95       	ror	r24
    brcs    usbCrcNoXor
 102:	10 f0       	brcs	.+4      	; 0x108 <usbCrcNoXor>
    eor     resCrcL, polyL
 104:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 106:	95 27       	eor	r25, r21

00000108 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 108:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 10a:	c8 f3       	brcs	.-14     	; 0xfe <usbCrcBitLoop>

0000010c <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 10c:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 10e:	a8 f3       	brcs	.-22     	; 0xfa <usbCrcByteLoop>

00000110 <usbCrcReady>:
usbCrcReady:
    ret
 110:	08 95       	ret

00000112 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 112:	ea df       	rcall	.-44     	; 0xe8 <usbCrc16>
    st      ptr+, resCrcL
 114:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 116:	9d 93       	st	X+, r25
    ret
 118:	08 95       	ret

0000011a <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 11a:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 11c:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 11e:	cf 93       	push	r28

00000120 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 120:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 122:	83 9b       	sbis	0x10, 3	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 124:	e9 f7       	brne	.-6      	; 0x120 <waitForJ>

00000126 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 126:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 128:	09 c0       	rjmp	.+18     	; 0x13c <foundK>
    sbis    USBIN, USBMINUS
 12a:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 12c:	07 c0       	rjmp	.+14     	; 0x13c <foundK>
    sbis    USBIN, USBMINUS
 12e:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 130:	05 c0       	rjmp	.+10     	; 0x13c <foundK>
    sbis    USBIN, USBMINUS
 132:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 134:	03 c0       	rjmp	.+6      	; 0x13c <foundK>
    sbis    USBIN, USBMINUS
 136:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 138:	01 c0       	rjmp	.+2      	; 0x13c <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 13a:	a3 c0       	rjmp	.+326    	; 0x282 <sofError>

0000013c <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 13c:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 13e:	c0 91 93 00 	lds	r28, 0x0093	; 0x800093 <usbInputBufOffset>
    clr     YH                  ;1 [5]
 142:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 144:	c6 56       	subi	r28, 0x66	; 102
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 146:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 148:	83 9b       	sbis	0x10, 3	; 16
    rjmp    haveTwoBitsK    ;2 [10]
 14a:	02 c0       	rjmp	.+4      	; 0x150 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 14c:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 14e:	eb cf       	rjmp	.-42     	; 0x126 <waitForK>

00000150 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 150:	2f 93       	push	r18
    push    x1              ;2 [12]
 152:	0f 93       	push	r16
    push    x2              ;2 [14]
 154:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 156:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
 158:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 15a:	03 fb       	bst	r16, 3
    bld     shift, 0        ;1 [20]
 15c:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 15e:	4f 93       	push	r20
    push    cnt             ;2 [24]
 160:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 162:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
 164:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 166:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 168:	03 fb       	bst	r16, 3
    bld     shift, 1        ;1 [29]
 16a:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 16c:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 16e:	31 c0       	rjmp	.+98     	; 0x1d2 <rxbit2>

00000170 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 170:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 172:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 174:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
 176:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 178:	28 c0       	rjmp	.+80     	; 0x1ca <didUnstuff0>

0000017a <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 17a:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 17c:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 17e:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 180:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 182:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
 184:	29 c0       	rjmp	.+82     	; 0x1d8 <didUnstuff1>

00000186 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 186:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 188:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 18a:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 18c:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 18e:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
 190:	2b c0       	rjmp	.+86     	; 0x1e8 <didUnstuff2>

00000192 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 192:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
 194:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 196:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 198:	2a c0       	rjmp	.+84     	; 0x1ee <didUnstuff3>

0000019a <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 19a:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 19c:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
 19e:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 1a0:	2c c0       	rjmp	.+88     	; 0x1fa <didUnstuff4>

000001a2 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 1a2:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 1a4:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
 1a6:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 1a8:	2f c0       	rjmp	.+94     	; 0x208 <didUnstuff5>

000001aa <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 1aa:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 1ac:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
 1ae:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 1b0:	32 c0       	rjmp	.+100    	; 0x216 <didUnstuff6>

000001b2 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 1b2:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 1b4:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
 1b6:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 1b8:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 1ba:	00 00       	nop
    eor     x2, x1      ;1 [6]
 1bc:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 1be:	13 fb       	bst	r17, 3
    bld     shift, 0    ;1 [8]
 1c0:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 1c2:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
 1c4:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;1 [11] SE0 check for bit 1
 1c6:	c9 f1       	breq	.+114    	; 0x23a <se0>
    andi    shift, 0xf9 ;1 [12]
 1c8:	29 7f       	andi	r18, 0xF9	; 249

000001ca <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 1ca:	91 f2       	breq	.-92     	; 0x170 <unstuff0>
    eor     x1, x2      ;1 [14]
 1cc:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 1ce:	03 fb       	bst	r16, 3
    bld     shift, 1    ;1 [16]
 1d0:	21 f9       	bld	r18, 1

000001d2 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 1d2:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
 1d4:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 1d6:	89 f2       	breq	.-94     	; 0x17a <unstuff1>

000001d8 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 1d8:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 1da:	58 f1       	brcs	.+86     	; 0x232 <overflow>
    eor     x2, x1      ;1 [22]
 1dc:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 1de:	13 fb       	bst	r17, 3
    bld     shift, 2    ;1 [24]
 1e0:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 1e2:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
 1e4:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 1e6:	79 f2       	breq	.-98     	; 0x186 <unstuff2>

000001e8 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 1e8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 1ea:	03 fb       	bst	r16, 3
    bld     shift, 3    ;1 [30]
 1ec:	23 f9       	bld	r18, 3

000001ee <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 1ee:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 1f0:	81 f2       	breq	.-96     	; 0x192 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 1f2:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
 1f4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 1f6:	13 fb       	bst	r17, 3
    bld     shift, 4    ;1 [36]
 1f8:	24 f9       	bld	r18, 4

000001fa <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 1fa:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 1fc:	71 f2       	breq	.-100    	; 0x19a <unstuff4>
    nop2                ;2 [40]
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 200:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
 202:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 204:	03 fb       	bst	r16, 3
    bld     shift, 5    ;1 [44]
 206:	25 f9       	bld	r18, 5

00000208 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 208:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 20a:	59 f2       	breq	.-106    	; 0x1a2 <unstuff5>
    nop2                ;2 [48]
 20c:	00 c0       	rjmp	.+0      	; 0x20e <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 20e:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
 210:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 212:	13 fb       	bst	r17, 3
    bld     shift, 6    ;1 [52]
 214:	26 f9       	bld	r18, 6

00000216 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 216:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 218:	40 f2       	brcs	.-112    	; 0x1aa <unstuff6>
    nop2                ;2 [56]
 21a:	00 c0       	rjmp	.+0      	; 0x21c <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 21c:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
 21e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 220:	03 fb       	bst	r16, 3
    bld     shift, 7    ;1 [60]
 222:	27 f9       	bld	r18, 7

00000224 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 224:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 226:	28 f6       	brcc	.-118    	; 0x1b2 <rxLoop>

00000228 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 228:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 22a:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 22c:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
 22e:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 230:	f9 cf       	rjmp	.-14     	; 0x224 <didUnstuff7>

00000232 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 232:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 234:	1a bf       	out	0x3a, r17	; 58

00000236 <ignorePacket>:
ignorePacket:
    clr     token
 236:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 238:	19 c0       	rjmp	.+50     	; 0x26c <handleSetupOrOut>

0000023a <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 23a:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 23c:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 23e:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 240:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 242:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 244:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 246:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 248:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 24a:	f9 f0       	breq	.+62     	; 0x28a <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 24c:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 24e:	e9 f0       	breq	.+58     	; 0x28a <handleData>
    lds     shift, usbDeviceAddr;[17]
 250:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 254:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 256:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 258:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 25a:	ed cf       	rjmp	.-38     	; 0x236 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 25c:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 25e:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 260:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 262:	41 f1       	breq	.+80     	; 0x2b4 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 264:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 266:	11 f0       	breq	.+4      	; 0x26c <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 268:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 26a:	29 f7       	brne	.-54     	; 0x236 <ignorePacket>

0000026c <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 26c:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <usbCurrentTok>

00000270 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 270:	3f 91       	pop	r19
 272:	4f 91       	pop	r20
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	2f 91       	pop	r18
 27a:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 27c:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 27e:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 280:	4f cf       	rjmp	.-354    	; 0x120 <waitForJ>

00000282 <sofError>:
sofError:
    POP_RETI                    ;macro call
 282:	cf 91       	pop	r28
 284:	cf bf       	out	0x3f, r28	; 63
 286:	cf 91       	pop	r28
    reti
 288:	18 95       	reti

0000028a <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 28a:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <usbCurrentTok>
    tst     shift               ;[20]
 28e:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 290:	79 f3       	breq	.-34     	; 0x270 <doReturn>
    lds     x2, usbRxLen        ;[22]
 292:	10 91 96 00 	lds	r17, 0x0096	; 0x800096 <usbRxLen>
    tst     x2                  ;[24]
 296:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 298:	69 f5       	brne	.+90     	; 0x2f4 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 29a:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 29c:	6a f1       	brmi	.+90     	; 0x2f8 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 29e:	30 93 96 00 	sts	0x0096, r19	; 0x800096 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 2a2:	20 93 92 00 	sts	0x0092, r18	; 0x800092 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 2a6:	10 91 93 00 	lds	r17, 0x0093	; 0x800093 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 2aa:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2ac:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2ae:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2b2:	22 c0       	rjmp	.+68     	; 0x2f8 <sendAckAndReti>

000002b4 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2b4:	00 91 96 00 	lds	r16, 0x0096	; 0x800096 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2b8:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2ba:	e4 f4       	brge	.+56     	; 0x2f4 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2bc:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2be:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2c0:	49 f4       	brne	.+18     	; 0x2d4 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2c2:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2c6:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2c8:	19 c0       	rjmp	.+50     	; 0x2fc <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2ca:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2ce:	ca e7       	ldi	r28, 0x7A	; 122
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2d2:	18 c0       	rjmp	.+48     	; 0x304 <usbSendAndReti>

000002d4 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2d4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 2d8:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 2da:	10 c0       	rjmp	.+32     	; 0x2fc <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 2dc:	00 93 85 00 	sts	0x0085, r16	; 0x800085 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 2e0:	c6 e8       	ldi	r28, 0x86	; 134
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 2e4:	0f c0       	rjmp	.+30     	; 0x304 <usbSendAndReti>

000002e6 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 2e6:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 2e8:	a8 f4       	brcc	.+42     	; 0x314 <doExorN1>
    subi    x4, 1               ;[-3]
 2ea:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 2ec:	a9 f4       	brne	.+42     	; 0x318 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 2ee:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 2f0:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 2f2:	f9 cf       	rjmp	.-14     	; 0x2e6 <stuffN1Delay>

000002f4 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 2f4:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <usbSendX3>

000002f8 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 2f8:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <usbSendX3>

000002fc <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 2fc:	43 2f       	mov	r20, r19

000002fe <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 2fe:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 300:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 302:	32 e0       	ldi	r19, 0x02	; 2

00000304 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 304:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
 306:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 308:	93 9a       	sbi	0x12, 3	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
 30a:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 30c:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 30e:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 310:	1c e0       	ldi	r17, 0x0C	; 12
    push    x4                  ;[-4]
 312:	5f 93       	push	r21

00000314 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 314:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 316:	56 e0       	ldi	r21, 0x06	; 6

00000318 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 318:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
 31a:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 31c:	20 f4       	brcc	.+8      	; 0x326 <doExorN2>
    subi    x4, 1               ;[03]
 31e:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 320:	21 f4       	brne	.+8      	; 0x32a <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 322:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 324:	f9 cf       	rjmp	.-14     	; 0x318 <commonN1>

00000326 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 326:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 328:	56 e0       	ldi	r21, 0x06	; 6

0000032a <commonN2>:
commonN2:
    nop                         ;[06] [14]
 32a:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 32c:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 32e:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
 330:	d0 f2       	brcs	.-76     	; 0x2e6 <stuffN1Delay>

00000332 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 332:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 334:	28 f4       	brcc	.+10     	; 0x340 <doExor6>
    subi    x4, 1               ;[44]
 336:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 338:	29 f4       	brne	.+10     	; 0x344 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 33a:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 33c:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 33e:	f9 cf       	rjmp	.-14     	; 0x332 <stuff6Delay>

00000340 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 340:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 342:	56 e0       	ldi	r21, 0x06	; 6

00000344 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 344:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 346:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
 348:	20 f4       	brcc	.+8      	; 0x352 <doExor7>
    subi    x4, 1               ;[50]
 34a:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 34c:	21 f4       	brne	.+8      	; 0x356 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 34e:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 350:	f9 cf       	rjmp	.-14     	; 0x344 <common6>

00000352 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 352:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 354:	56 e0       	ldi	r21, 0x06	; 6

00000356 <common7>:
common7:
    ld      shift, y+           ;[53]
 356:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 358:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 35a:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
 35c:	21 f6       	brne	.-120    	; 0x2e6 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 35e:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[59]
 360:	10 91 97 00 	lds	r17, 0x0097	; 0x800097 <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 364:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 366:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 368:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 36a:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 36c:	11 f0       	breq	.+4      	; 0x372 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 36e:	10 93 91 00 	sts	0x0091, r17	; 0x800091 <usbDeviceAddr>

00000372 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 372:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 374:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 376:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR          ;[06]
 378:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
 37a:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1              ;[08]
 37c:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 37e:	43 7f       	andi	r20, 0xF3	; 243
    pop     x4                  ;[10]
 380:	5f 91       	pop	r21
    nop2                        ;[12]
 382:	00 c0       	rjmp	.+0      	; 0x384 <skipAddrAssign+0x12>
    nop2                        ;[14]
 384:	00 c0       	rjmp	.+0      	; 0x386 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 386:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
 388:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 38a:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 38c:	71 cf       	rjmp	.-286    	; 0x270 <doReturn>

0000038e <adc_init>:
 #include <avr/io.h>
 #include "adc.h"

 void adc_init()
 {
	ADMUX |= (1<<REFS0) | (1<<ADLAR); //voltage referenc aref, left adjust result
 38e:	87 b1       	in	r24, 0x07	; 7
 390:	80 66       	ori	r24, 0x60	; 96
 392:	87 b9       	out	0x07, r24	; 7
	ADMUX &= 0xF0; //set MUX3:0 to 0 => Channel 0
 394:	87 b1       	in	r24, 0x07	; 7
 396:	80 7f       	andi	r24, 0xF0	; 240
 398:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | (6<<ADPS0); //ADEN enable adc, ADPS0 set prescaler to 64, 12MHz/64 = 187,5kHz
 39a:	86 b1       	in	r24, 0x06	; 6
 39c:	86 68       	ori	r24, 0x86	; 134
 39e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC); //start first conversation
 3a0:	36 9a       	sbi	0x06, 6	; 6
 3a2:	08 95       	ret

000003a4 <adc_updateValues>:
 }

 uint8_t adc_updateValues(uint8_t* x, uint8_t* y)
 {
 3a4:	fc 01       	movw	r30, r24
	static unsigned char ready = 0;
	static unsigned char s_current = 0;
	static unsigned char x_tmp, y_tmp;
	if(!(ADCSRA & (1<<ADSC))) // if conversion finished
 3a6:	36 99       	sbic	0x06, 6	; 6
 3a8:	18 c0       	rjmp	.+48     	; 0x3da <adc_updateValues+0x36>
	{
		//execute handling
		if(s_current == 0)
 3aa:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <s_current.1492>
 3ae:	81 11       	cpse	r24, r1
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <adc_updateValues+0x1e>
		{
			x_tmp = ADCH;
 3b2:	85 b1       	in	r24, 0x05	; 5
 3b4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <x_tmp.1493>
			ADMUX |= (1<<MUX0); //set adc to channel 1
 3b8:	38 9a       	sbi	0x07, 0	; 7
			s_current = 1;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <s_current.1492>
 3c0:	0b c0       	rjmp	.+22     	; 0x3d8 <adc_updateValues+0x34>
		}
		else
		{
			y_tmp = ADCH;
 3c2:	85 b1       	in	r24, 0x05	; 5
 3c4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <y_tmp.1494>
			ADMUX &= 0xF0; //set adc to channel 0
 3c8:	87 b1       	in	r24, 0x07	; 7
 3ca:	80 7f       	andi	r24, 0xF0	; 240
 3cc:	87 b9       	out	0x07, r24	; 7
			s_current = 0;
 3ce:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <s_current.1492>
			ready = 1;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		}
		ADCSRA |= (1<<ADSC); //start next conversion
 3d8:	36 9a       	sbi	0x06, 6	; 6
	}

	if(ready)
 3da:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 3de:	88 23       	and	r24, r24
 3e0:	51 f0       	breq	.+20     	; 0x3f6 <adc_updateValues+0x52>
	{
		ready = 0;
 3e2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
		*x = x_tmp;
 3e6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <x_tmp.1493>
 3ea:	80 83       	st	Z, r24
		*y = y_tmp;
 3ec:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <y_tmp.1494>
 3f0:	fb 01       	movw	r30, r22
 3f2:	80 83       	st	Z, r24
		return 1;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
 3f6:	08 95       	ret

000003f8 <usbFunctionSetup>:
static uchar    idleRate;   /* repeat rate for keyboards, never used for mice */

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 3f8:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 3fa:	90 81       	ld	r25, Z
 3fc:	90 76       	andi	r25, 0x60	; 96
 3fe:	90 32       	cpi	r25, 0x20	; 32
 400:	e1 f4       	brne	.+56     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 402:	81 81       	ldd	r24, Z+1	; 0x01
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	41 f4       	brne	.+16     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
 408:	85 e7       	ldi	r24, 0x75	; 117
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 410:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
            return sizeof(reportBuffer);
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	41 f4       	brne	.+16     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
            usbMsgPtr = &idleRate;
 41c:	84 e7       	ldi	r24, 0x74	; 116
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 424:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
            return 1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 42c:	8a 30       	cpi	r24, 0x0A	; 10
 42e:	39 f4       	brne	.+14     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
            idleRate = rq->wValue.bytes[1];
 430:	83 81       	ldd	r24, Z+3	; 0x03
 432:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <idleRate>
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
 43e:	80 e0       	ldi	r24, 0x00	; 0
}
 440:	08 95       	ret

00000442 <normXY>:
    }
}


void normXY(uint8_t x, uint8_t y, int8_t* x_norm, int8_t* y_norm)
{
 442:	8f 92       	push	r8
 444:	9f 92       	push	r9
 446:	af 92       	push	r10
 448:	bf 92       	push	r11
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	d8 2f       	mov	r29, r24
 458:	c6 2f       	mov	r28, r22
 45a:	7a 01       	movw	r14, r20
 45c:	89 01       	movw	r16, r18
	static uint8_t x_lowerThreshold = 120;
	static float y_avg = 128;
	static uint8_t y_upperThreshold = 130;
	static uint8_t y_lowerThreshold = 120;

	if(firstrun)
 45e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <firstrun.1872>
 462:	88 23       	and	r24, r24
 464:	09 f4       	brne	.+2      	; 0x468 <__stack+0x9>
 466:	44 c0       	rjmp	.+136    	; 0x4f0 <__stack+0x91>
	{
		x_avg = (float)x;
 468:	6d 2f       	mov	r22, r29
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	74 d3       	rcall	.+1768   	; 0xb5a <__floatunsisf>
 472:	4b 01       	movw	r8, r22
 474:	5c 01       	movw	r10, r24
 476:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <x_avg.1873>
 47a:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <x_avg.1873+0x1>
 47e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <x_avg.1873+0x2>
 482:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <x_avg.1873+0x3>
		x_upperThreshold = x_avg + NORM_THRESHOLD;
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	40 e7       	ldi	r20, 0x70	; 112
 48c:	51 e4       	ldi	r21, 0x41	; 65
 48e:	d0 d2       	rcall	.+1440   	; 0xa30 <__addsf3>
 490:	38 d3       	rcall	.+1648   	; 0xb02 <__fixunssfsi>
 492:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <x_upperThreshold.1874>
		x_lowerThreshold = x_avg - NORM_THRESHOLD;
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	40 e7       	ldi	r20, 0x70	; 112
 49c:	51 e4       	ldi	r21, 0x41	; 65
 49e:	c5 01       	movw	r24, r10
 4a0:	b4 01       	movw	r22, r8
 4a2:	c5 d2       	rcall	.+1418   	; 0xa2e <__subsf3>
 4a4:	2e d3       	rcall	.+1628   	; 0xb02 <__fixunssfsi>
 4a6:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <x_lowerThreshold.1875>
		y_avg = (float)y;
 4aa:	6c 2f       	mov	r22, r28
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	53 d3       	rcall	.+1702   	; 0xb5a <__floatunsisf>
 4b4:	4b 01       	movw	r8, r22
 4b6:	5c 01       	movw	r10, r24
 4b8:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <y_avg.1876>
 4bc:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <y_avg.1876+0x1>
 4c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <y_avg.1876+0x2>
 4c4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <y_avg.1876+0x3>
		y_upperThreshold = y_avg + NORM_THRESHOLD;
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	40 e7       	ldi	r20, 0x70	; 112
 4ce:	51 e4       	ldi	r21, 0x41	; 65
 4d0:	af d2       	rcall	.+1374   	; 0xa30 <__addsf3>
 4d2:	17 d3       	rcall	.+1582   	; 0xb02 <__fixunssfsi>
 4d4:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <y_upperThreshold.1877>
		y_lowerThreshold = y_avg - NORM_THRESHOLD;
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	40 e7       	ldi	r20, 0x70	; 112
 4de:	51 e4       	ldi	r21, 0x41	; 65
 4e0:	c5 01       	movw	r24, r10
 4e2:	b4 01       	movw	r22, r8
 4e4:	a4 d2       	rcall	.+1352   	; 0xa2e <__subsf3>
 4e6:	0d d3       	rcall	.+1562   	; 0xb02 <__fixunssfsi>
 4e8:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
		firstrun = 0;
 4ec:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <firstrun.1872>
	}

	if ((x > x_lowerThreshold) && (x < x_upperThreshold))
 4f0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x_lowerThreshold.1875>
 4f4:	8d 17       	cp	r24, r29
 4f6:	50 f5       	brcc	.+84     	; 0x54c <__stack+0xed>
 4f8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <x_upperThreshold.1874>
 4fc:	d8 17       	cp	r29, r24
 4fe:	30 f5       	brcc	.+76     	; 0x54c <__stack+0xed>
	{
		x_avg = x_avg * ((float)(AVG_SIZE - 1)/AVG_SIZE) + ((float)x) * 1/((float) AVG_SIZE);
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	40 e6       	ldi	r20, 0x60	; 96
 506:	5f e3       	ldi	r21, 0x3F	; 63
 508:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <x_avg.1873>
 50c:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <x_avg.1873+0x1>
 510:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <x_avg.1873+0x2>
 514:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <x_avg.1873+0x3>
 518:	ae d3       	rcall	.+1884   	; 0xc76 <__mulsf3>
 51a:	4b 01       	movw	r8, r22
 51c:	5c 01       	movw	r10, r24
 51e:	6d 2f       	mov	r22, r29
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	19 d3       	rcall	.+1586   	; 0xb5a <__floatunsisf>
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	5e e3       	ldi	r21, 0x3E	; 62
 530:	a2 d3       	rcall	.+1860   	; 0xc76 <__mulsf3>
 532:	9b 01       	movw	r18, r22
 534:	ac 01       	movw	r20, r24
 536:	c5 01       	movw	r24, r10
 538:	b4 01       	movw	r22, r8
 53a:	7a d2       	rcall	.+1268   	; 0xa30 <__addsf3>
 53c:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <x_avg.1873>
 540:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <x_avg.1873+0x1>
 544:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <x_avg.1873+0x2>
 548:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <x_avg.1873+0x3>
	}

	if ((y > (y_lowerThreshold)) && (y < (y_upperThreshold)))
 54c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 550:	8c 17       	cp	r24, r28
 552:	50 f5       	brcc	.+84     	; 0x5a8 <__stack+0x149>
 554:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <y_upperThreshold.1877>
 558:	c8 17       	cp	r28, r24
 55a:	30 f5       	brcc	.+76     	; 0x5a8 <__stack+0x149>
	{
		y_avg = y_avg * ((float)(AVG_SIZE - 1)/AVG_SIZE) + ((float)y) * 1/((float) AVG_SIZE);
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	40 e6       	ldi	r20, 0x60	; 96
 562:	5f e3       	ldi	r21, 0x3F	; 63
 564:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <y_avg.1876>
 568:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <y_avg.1876+0x1>
 56c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y_avg.1876+0x2>
 570:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y_avg.1876+0x3>
 574:	80 d3       	rcall	.+1792   	; 0xc76 <__mulsf3>
 576:	4b 01       	movw	r8, r22
 578:	5c 01       	movw	r10, r24
 57a:	6c 2f       	mov	r22, r28
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	eb d2       	rcall	.+1494   	; 0xb5a <__floatunsisf>
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	5e e3       	ldi	r21, 0x3E	; 62
 58c:	74 d3       	rcall	.+1768   	; 0xc76 <__mulsf3>
 58e:	9b 01       	movw	r18, r22
 590:	ac 01       	movw	r20, r24
 592:	c5 01       	movw	r24, r10
 594:	b4 01       	movw	r22, r8
 596:	4c d2       	rcall	.+1176   	; 0xa30 <__addsf3>
 598:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <y_avg.1876>
 59c:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <y_avg.1876+0x1>
 5a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <y_avg.1876+0x2>
 5a4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <y_avg.1876+0x3>
	}

	*x_norm =(int8_t)( ((float) x) - x_avg );
 5a8:	6d 2f       	mov	r22, r29
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	d4 d2       	rcall	.+1448   	; 0xb5a <__floatunsisf>
 5b2:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <x_avg.1873>
 5b6:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <x_avg.1873+0x1>
 5ba:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <x_avg.1873+0x2>
 5be:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <x_avg.1873+0x3>
 5c2:	35 d2       	rcall	.+1130   	; 0xa2e <__subsf3>
 5c4:	99 d2       	rcall	.+1330   	; 0xaf8 <__fixsfsi>
 5c6:	f7 01       	movw	r30, r14
 5c8:	60 83       	st	Z, r22
	*y_norm =(int8_t)( y_avg - ((float) y) );
 5ca:	6c 2f       	mov	r22, r28
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	c3 d2       	rcall	.+1414   	; 0xb5a <__floatunsisf>
 5d4:	9b 01       	movw	r18, r22
 5d6:	ac 01       	movw	r20, r24
 5d8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <y_avg.1876>
 5dc:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <y_avg.1876+0x1>
 5e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y_avg.1876+0x2>
 5e4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y_avg.1876+0x3>
 5e8:	22 d2       	rcall	.+1092   	; 0xa2e <__subsf3>
 5ea:	86 d2       	rcall	.+1292   	; 0xaf8 <__fixsfsi>
 5ec:	f8 01       	movw	r30, r16
 5ee:	60 83       	st	Z, r22
}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	ff 90       	pop	r15
 5fa:	ef 90       	pop	r14
 5fc:	bf 90       	pop	r11
 5fe:	af 90       	pop	r10
 600:	9f 90       	pop	r9
 602:	8f 90       	pop	r8
 604:	08 95       	ret

00000606 <main>:
}

/* ------------------------------------------------------------------------- */

int __attribute__((noreturn)) main(void)
{
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	00 d0       	rcall	.+0      	; 0x60c <main+0x6>
 60c:	00 d0       	rcall	.+0      	; 0x60e <main+0x8>
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
	uint8_t button_dpi;
	uint8_t button_dpi_old;

	/* init button ports & stuff */
	//set all buttons and analog inputs to input
	DDR_BUTTONS &= ~((1<<ANALOG_X) | (1<<ANALOG_Y) | (1<<BUTTON_LMB) | (1<<BUTTON_RMB) | (1<<BUTTON_WHEELUP) | (1<<BUTTON_WHEELDWN));
 612:	84 b3       	in	r24, 0x14	; 20
 614:	80 7c       	andi	r24, 0xC0	; 192
 616:	84 bb       	out	0x14, r24	; 20
	DDR_DPI &= ~(1<<BUTTON_DPI);
 618:	88 98       	cbi	0x11, 0	; 17
	//set pullups on all buttons
	PORT_BUTTONS |= (1<<BUTTON_LMB) | (1<<BUTTON_RMB) | (1<<BUTTON_WHEELUP) | (1<<BUTTON_WHEELDWN);
 61a:	85 b3       	in	r24, 0x15	; 21
 61c:	8c 63       	ori	r24, 0x3C	; 60
 61e:	85 bb       	out	0x15, r24	; 21
	PORT_DPI |= (1<<BUTTON_DPI);
 620:	90 9a       	sbi	0x12, 0	; 18
	button_dpi_old = PIN_DPI & (1<<BUTTON_DPI);
 622:	80 b3       	in	r24, 0x10	; 16
 624:	81 70       	andi	r24, 0x01	; 1
 626:	a8 2e       	mov	r10, r24

	adc_init();
 628:	b2 de       	rcall	.-668    	; 0x38e <adc_init>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 62a:	9e e0       	ldi	r25, 0x0E	; 14
 62c:	88 e1       	ldi	r24, 0x18	; 24
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	a8 95       	wdr
 634:	81 bd       	out	0x21, r24	; 33
 636:	0f be       	out	0x3f, r0	; 63
 638:	91 bd       	out	0x21, r25	; 33
	//uart_init();
    wdt_enable(WDTO_1S); //needed
    usbInit();
 63a:	ec d1       	rcall	.+984    	; 0xa14 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 63c:	8b 9a       	sbi	0x11, 3	; 17
 63e:	8f ef       	ldi	r24, 0xFF	; 255
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
 640:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 642:	e7 eb       	ldi	r30, 0xB7	; 183
 644:	fb e0       	ldi	r31, 0x0B	; 11
 646:	31 97       	sbiw	r30, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <main+0x40>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x46>
 64c:	00 00       	nop
 64e:	81 50       	subi	r24, 0x01	; 1
	//uart_init();
    wdt_enable(WDTO_1S); //needed
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
 650:	b9 f7       	brne	.-18     	; 0x640 <main+0x3a>
        wdt_reset();
        _delay_ms(1);
    }

    usbDeviceConnect();
 652:	8b 98       	cbi	0x11, 3	; 17
    sei();
 654:	78 94       	sei
	uchar   i;
	uint8_t x_raw;
	uint8_t y_raw;
	int8_t x_norm;
	int8_t y_norm;
	uint8_t dpi_factor = 2;
 656:	68 94       	set
 658:	bb 24       	eor	r11, r11
 65a:	b1 f8       	bld	r11, 1
    usbDeviceConnect();
    sei();
    while(1){                /* main event loop */
        wdt_reset();
        usbPoll();
		if(usbInterruptIsReady()){
 65c:	05 e8       	ldi	r16, 0x85	; 133
 65e:	10 e0       	ldi	r17, 0x00	; 0
		
		//button emulated mousewheel
		if(!button_wheelup)
			reportBuffer.dWheel = 10/dpi_factor;
		else if(!button_wheeldwn)
			reportBuffer.dWheel = -10/dpi_factor;
 660:	0f 2e       	mov	r0, r31
 662:	f6 ef       	ldi	r31, 0xF6	; 246
 664:	cf 2e       	mov	r12, r31
 666:	dd 24       	eor	r13, r13
 668:	da 94       	dec	r13
 66a:	f0 2d       	mov	r31, r0
		else
			reportBuffer.buttonMask &= ~(1<<1); //deactivate right mousebutton
		
		//button emulated mousewheel
		if(!button_wheelup)
			reportBuffer.dWheel = 10/dpi_factor;
 66c:	0f 2e       	mov	r0, r31
 66e:	fa e0       	ldi	r31, 0x0A	; 10
 670:	ef 2e       	mov	r14, r31
 672:	f1 2c       	mov	r15, r1
 674:	f0 2d       	mov	r31, r0
						break;
					case 2:
						dpi_factor = 5;
						break;
					case 5:
						dpi_factor = 10;
 676:	0f 2e       	mov	r0, r31
 678:	fa e0       	ldi	r31, 0x0A	; 10
 67a:	6f 2e       	mov	r6, r31
 67c:	f0 2d       	mov	r31, r0
						break;
					case 10:
						dpi_factor = 1;
 67e:	77 24       	eor	r7, r7
 680:	73 94       	inc	r7
			if(!button_dpi)
			{
				switch(dpi_factor)
				{
					case 1:
						dpi_factor = 2;
 682:	68 94       	set
 684:	88 24       	eor	r8, r8
 686:	81 f8       	bld	r8, 1
						break;
					case 2:
						dpi_factor = 5;
 688:	0f 2e       	mov	r0, r31
 68a:	f5 e0       	ldi	r31, 0x05	; 5
 68c:	9f 2e       	mov	r9, r31
 68e:	f0 2d       	mov	r31, r0
    }

    usbDeviceConnect();
    sei();
    while(1){                /* main event loop */
        wdt_reset();
 690:	a8 95       	wdr
        usbPoll();
 692:	9f d0       	rcall	.+318    	; 0x7d2 <usbPoll>
		if(usbInterruptIsReady()){
 694:	f8 01       	movw	r30, r16
 696:	80 81       	ld	r24, Z
 698:	84 ff       	sbrs	r24, 4
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <main+0x9e>
            /* called after every poll of the interrupt endpoint */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 69c:	64 e0       	ldi	r22, 0x04	; 4
 69e:	85 e7       	ldi	r24, 0x75	; 117
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	75 d0       	rcall	.+234    	; 0x78e <usbSetInterrupt>
        }

		/*button inputs handling*/
		//scan all buttons
		button_rmb = PIN_BUTTONS & (1<<BUTTON_RMB);
 6a4:	33 b3       	in	r19, 0x13	; 19
 6a6:	38 70       	andi	r19, 0x08	; 8
		button_lmb = PIN_BUTTONS & (1<<BUTTON_LMB);
 6a8:	83 b3       	in	r24, 0x13	; 19
		button_wheelup = PIN_BUTTONS & (1<<BUTTON_WHEELUP);
 6aa:	93 b3       	in	r25, 0x13	; 19
 6ac:	90 71       	andi	r25, 0x10	; 16
		button_wheeldwn = PIN_BUTTONS & (1<<BUTTON_WHEELDWN);
 6ae:	43 b3       	in	r20, 0x13	; 19
		button_dpi = PIN_DPI & (1<<BUTTON_DPI);
 6b0:	20 b3       	in	r18, 0x10	; 16
 6b2:	21 70       	andi	r18, 0x01	; 1

		if(!button_lmb)
 6b4:	82 fd       	sbrc	r24, 2
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <main+0xbe>
			reportBuffer.buttonMask |= (1<<0); //activate left mousebutton
 6b8:	e5 e7       	ldi	r30, 0x75	; 117
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	81 60       	ori	r24, 0x01	; 1
 6c0:	80 83       	st	Z, r24
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <main+0xc8>
		else
			reportBuffer.buttonMask &= ~(1<<0); //deactivate left mousebutton
 6c4:	e5 e7       	ldi	r30, 0x75	; 117
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	8e 7f       	andi	r24, 0xFE	; 254
 6cc:	80 83       	st	Z, r24

		if(!button_rmb)
 6ce:	31 11       	cpse	r19, r1
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <main+0xd8>
			reportBuffer.buttonMask |= (1<<1); //activate right mousebutton
 6d2:	e5 e7       	ldi	r30, 0x75	; 117
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	82 60       	ori	r24, 0x02	; 2
 6da:	80 83       	st	Z, r24
 6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <main+0xe2>
		else
			reportBuffer.buttonMask &= ~(1<<1); //deactivate right mousebutton
 6de:	e5 e7       	ldi	r30, 0x75	; 117
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	8d 7f       	andi	r24, 0xFD	; 253
 6e6:	80 83       	st	Z, r24
		
		//button emulated mousewheel
		if(!button_wheelup)
 6e8:	91 11       	cpse	r25, r1
 6ea:	07 c0       	rjmp	.+14     	; 0x6fa <main+0xf4>
			reportBuffer.dWheel = 10/dpi_factor;
 6ec:	6b 2d       	mov	r22, r11
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	c7 01       	movw	r24, r14
 6f2:	24 d3       	rcall	.+1608   	; 0xd3c <__divmodhi4>
 6f4:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <reportBuffer+0x3>
 6f8:	0b c0       	rjmp	.+22     	; 0x710 <main+0x10a>
		else if(!button_wheeldwn)
 6fa:	45 fd       	sbrc	r20, 5
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <main+0x106>
			reportBuffer.dWheel = -10/dpi_factor;
 6fe:	6b 2d       	mov	r22, r11
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	c6 01       	movw	r24, r12
 704:	1b d3       	rcall	.+1590   	; 0xd3c <__divmodhi4>
 706:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <reportBuffer+0x3>
 70a:	02 c0       	rjmp	.+4      	; 0x710 <main+0x10a>
		else
			reportBuffer.dWheel = 0;
 70c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <reportBuffer+0x3>

		//if dpi button pressed switch through various dpi factors
		if(button_dpi != button_dpi_old)
 710:	2a 15       	cp	r18, r10
 712:	c1 f0       	breq	.+48     	; 0x744 <main+0x13e>
		{
			button_dpi_old = button_dpi;
			if(!button_dpi)
 714:	21 11       	cpse	r18, r1
 716:	12 c0       	rjmp	.+36     	; 0x73c <main+0x136>
			{
				switch(dpi_factor)
 718:	f5 e0       	ldi	r31, 0x05	; 5
 71a:	bf 16       	cp	r11, r31
 71c:	49 f0       	breq	.+18     	; 0x730 <main+0x12a>
 71e:	8a e0       	ldi	r24, 0x0A	; 10
 720:	b8 16       	cp	r11, r24
 722:	49 f0       	breq	.+18     	; 0x736 <main+0x130>
 724:	e2 e0       	ldi	r30, 0x02	; 2
 726:	be 12       	cpse	r11, r30
 728:	0b c0       	rjmp	.+22     	; 0x740 <main+0x13a>
			reportBuffer.dWheel = 0;

		//if dpi button pressed switch through various dpi factors
		if(button_dpi != button_dpi_old)
		{
			button_dpi_old = button_dpi;
 72a:	a2 2e       	mov	r10, r18
				{
					case 1:
						dpi_factor = 2;
						break;
					case 2:
						dpi_factor = 5;
 72c:	b9 2c       	mov	r11, r9
 72e:	0a c0       	rjmp	.+20     	; 0x744 <main+0x13e>
			reportBuffer.dWheel = 0;

		//if dpi button pressed switch through various dpi factors
		if(button_dpi != button_dpi_old)
		{
			button_dpi_old = button_dpi;
 730:	a2 2e       	mov	r10, r18
						break;
					case 2:
						dpi_factor = 5;
						break;
					case 5:
						dpi_factor = 10;
 732:	b6 2c       	mov	r11, r6
						break;
 734:	07 c0       	rjmp	.+14     	; 0x744 <main+0x13e>
			reportBuffer.dWheel = 0;

		//if dpi button pressed switch through various dpi factors
		if(button_dpi != button_dpi_old)
		{
			button_dpi_old = button_dpi;
 736:	a2 2e       	mov	r10, r18
						break;
					case 5:
						dpi_factor = 10;
						break;
					case 10:
						dpi_factor = 1;
 738:	b7 2c       	mov	r11, r7
						break;
 73a:	04 c0       	rjmp	.+8      	; 0x744 <main+0x13e>
			reportBuffer.dWheel = 0;

		//if dpi button pressed switch through various dpi factors
		if(button_dpi != button_dpi_old)
		{
			button_dpi_old = button_dpi;
 73c:	a2 2e       	mov	r10, r18
 73e:	02 c0       	rjmp	.+4      	; 0x744 <main+0x13e>
 740:	a2 2e       	mov	r10, r18
			if(!button_dpi)
			{
				switch(dpi_factor)
				{
					case 1:
						dpi_factor = 2;
 742:	b8 2c       	mov	r11, r8
				}
			}
		}
		
		//joystick input stuff
		if(adc_updateValues(&(x_raw), &(y_raw)))
 744:	be 01       	movw	r22, r28
 746:	6e 5f       	subi	r22, 0xFE	; 254
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	ce 01       	movw	r24, r28
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	2a de       	rcall	.-940    	; 0x3a4 <adc_updateValues>
 750:	88 23       	and	r24, r24
 752:	09 f4       	brne	.+2      	; 0x756 <main+0x150>
 754:	9d cf       	rjmp	.-198    	; 0x690 <main+0x8a>
		{	
			normXY(x_raw, y_raw, &x_norm, &y_norm );
 756:	9e 01       	movw	r18, r28
 758:	2c 5f       	subi	r18, 0xFC	; 252
 75a:	3f 4f       	sbci	r19, 0xFF	; 255
 75c:	ae 01       	movw	r20, r28
 75e:	4d 5f       	subi	r20, 0xFD	; 253
 760:	5f 4f       	sbci	r21, 0xFF	; 255
 762:	6a 81       	ldd	r22, Y+2	; 0x02
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	6d de       	rcall	.-806    	; 0x442 <normXY>
			reportBuffer.dx = x_norm/dpi_factor;
 768:	2b 2d       	mov	r18, r11
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	e5 e7       	ldi	r30, 0x75	; 117
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	08 2e       	mov	r0, r24
 774:	00 0c       	add	r0, r0
 776:	99 0b       	sbc	r25, r25
 778:	b9 01       	movw	r22, r18
 77a:	e0 d2       	rcall	.+1472   	; 0xd3c <__divmodhi4>
 77c:	61 83       	std	Z+1, r22	; 0x01
			reportBuffer.dy = y_norm/dpi_factor;
 77e:	8c 81       	ldd	r24, Y+4	; 0x04
 780:	08 2e       	mov	r0, r24
 782:	00 0c       	add	r0, r0
 784:	99 0b       	sbc	r25, r25
 786:	b9 01       	movw	r22, r18
 788:	d9 d2       	rcall	.+1458   	; 0xd3c <__divmodhi4>
 78a:	62 83       	std	Z+2, r22	; 0x02
 78c:	81 cf       	rjmp	.-254    	; 0x690 <main+0x8a>

0000078e <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 78e:	cf 93       	push	r28
 790:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 792:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <usbTxStatus1>
 796:	24 ff       	sbrs	r18, 4
 798:	07 c0       	rjmp	.+14     	; 0x7a8 <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 79a:	e5 e8       	ldi	r30, 0x85	; 133
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	31 81       	ldd	r19, Z+1	; 0x01
 7a0:	28 e8       	ldi	r18, 0x88	; 136
 7a2:	23 27       	eor	r18, r19
 7a4:	21 83       	std	Z+1, r18	; 0x01
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 7a8:	2a e5       	ldi	r18, 0x5A	; 90
 7aa:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <usbTxStatus1>
 7ae:	e8 2f       	mov	r30, r24
 7b0:	f9 2f       	mov	r31, r25
 7b2:	a7 e8       	ldi	r26, 0x87	; 135
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 7b6:	8c 2f       	mov	r24, r28
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 7b8:	91 91       	ld	r25, Z+
 7ba:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 7bc:	81 50       	subi	r24, 0x01	; 1
 7be:	e1 f7       	brne	.-8      	; 0x7b8 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 7c0:	6c 2f       	mov	r22, r28
 7c2:	87 e8       	ldi	r24, 0x87	; 135
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	a5 dc       	rcall	.-1718   	; 0x112 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 7c8:	cc 5f       	subi	r28, 0xFC	; 252
 7ca:	c0 93 85 00 	sts	0x0085, r28	; 0x800085 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 7d6:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <usbRxLen>
 7da:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 7dc:	0a f4       	brpl	.+2      	; 0x7e0 <usbPoll+0xe>
 7de:	b4 c0       	rjmp	.+360    	; 0x948 <usbPoll+0x176>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 7e0:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <usbInputBufOffset>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 7e4:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <usbRxToken>
 7e8:	9d 32       	cpi	r25, 0x2D	; 45
 7ea:	09 f0       	breq	.+2      	; 0x7ee <usbPoll+0x1c>
 7ec:	ab c0       	rjmp	.+342    	; 0x944 <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 7ee:	88 30       	cpi	r24, 0x08	; 8
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <usbPoll+0x22>
 7f2:	a8 c0       	rjmp	.+336    	; 0x944 <usbPoll+0x172>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 7f4:	cc e0       	ldi	r28, 0x0C	; 12
 7f6:	d0 e0       	ldi	r29, 0x00	; 0
 7f8:	c2 1b       	sub	r28, r18
 7fa:	d1 09       	sbc	r29, r1
 7fc:	c6 56       	subi	r28, 0x66	; 102
 7fe:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 800:	83 ec       	ldi	r24, 0xC3	; 195
 802:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 806:	8a e5       	ldi	r24, 0x5A	; 90
 808:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <usbTxLen>
        usbMsgFlags = 0;
 80c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 810:	88 81       	ld	r24, Y
 812:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 814:	19 f0       	breq	.+6      	; 0x81c <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 816:	ce 01       	movw	r24, r28
 818:	ef dd       	rcall	.-1058   	; 0x3f8 <usbFunctionSetup>
 81a:	8b c0       	rjmp	.+278    	; 0x932 <usbPoll+0x160>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 81c:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 81e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 822:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 824:	81 11       	cpse	r24, r1
 826:	06 c0       	rjmp	.+12     	; 0x834 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 828:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 82c:	23 e8       	ldi	r18, 0x83	; 131
 82e:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 830:	82 e0       	ldi	r24, 0x02	; 2
 832:	7b c0       	rjmp	.+246    	; 0x92a <usbPoll+0x158>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 834:	85 30       	cpi	r24, 0x05	; 5
 836:	31 f4       	brne	.+12     	; 0x844 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 838:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 83c:	23 e8       	ldi	r18, 0x83	; 131
 83e:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	73 c0       	rjmp	.+230    	; 0x92a <usbPoll+0x158>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 844:	86 30       	cpi	r24, 0x06	; 6
 846:	09 f0       	breq	.+2      	; 0x84a <usbPoll+0x78>
 848:	50 c0       	rjmp	.+160    	; 0x8ea <usbPoll+0x118>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	41 f4       	brne	.+16     	; 0x860 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 850:	8c e7       	ldi	r24, 0x7C	; 124
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 858:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
 85c:	82 e1       	ldi	r24, 0x12	; 18
 85e:	41 c0       	rjmp	.+130    	; 0x8e2 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 860:	82 30       	cpi	r24, 0x02	; 2
 862:	41 f4       	brne	.+16     	; 0x874 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 864:	8a e5       	ldi	r24, 0x5A	; 90
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 86c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
 870:	82 e2       	ldi	r24, 0x22	; 34
 872:	37 c0       	rjmp	.+110    	; 0x8e2 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 874:	83 30       	cpi	r24, 0x03	; 3
 876:	f1 f4       	brne	.+60     	; 0x8b4 <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 878:	91 11       	cpse	r25, r1
 87a:	08 c0       	rjmp	.+16     	; 0x88c <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 87c:	8c ea       	ldi	r24, 0xAC	; 172
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 884:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
 888:	84 e0       	ldi	r24, 0x04	; 4
 88a:	2b c0       	rjmp	.+86     	; 0x8e2 <usbPoll+0x110>
        SWITCH_CASE(1)
 88c:	91 30       	cpi	r25, 0x01	; 1
 88e:	41 f4       	brne	.+16     	; 0x8a0 <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 890:	8a e9       	ldi	r24, 0x9A	; 154
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 898:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
 89c:	82 e1       	ldi	r24, 0x12	; 18
 89e:	21 c0       	rjmp	.+66     	; 0x8e2 <usbPoll+0x110>
        SWITCH_CASE(2)
 8a0:	92 30       	cpi	r25, 0x02	; 2
 8a2:	e1 f4       	brne	.+56     	; 0x8dc <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 8a4:	8e e8       	ldi	r24, 0x8E	; 142
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 8ac:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
 8b0:	8c e0       	ldi	r24, 0x0C	; 12
 8b2:	17 c0       	rjmp	.+46     	; 0x8e2 <usbPoll+0x110>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 8b4:	81 32       	cpi	r24, 0x21	; 33
 8b6:	41 f4       	brne	.+16     	; 0x8c8 <usbPoll+0xf6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 8b8:	8c e6       	ldi	r24, 0x6C	; 108
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 8c0:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
 8c4:	89 e0       	ldi	r24, 0x09	; 9
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 8c8:	82 32       	cpi	r24, 0x22	; 34
 8ca:	51 f4       	brne	.+20     	; 0x8e0 <usbPoll+0x10e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 8cc:	86 e2       	ldi	r24, 0x26	; 38
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <usbMsgPtr+0x1>
 8d4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <usbMsgPtr>
 8d8:	84 e3       	ldi	r24, 0x34	; 52
 8da:	03 c0       	rjmp	.+6      	; 0x8e2 <usbPoll+0x110>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <usbPoll+0x110>
 8e0:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 8e2:	90 e4       	ldi	r25, 0x40	; 64
 8e4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <usbMsgFlags>
 8e8:	24 c0       	rjmp	.+72     	; 0x932 <usbPoll+0x160>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 8ea:	88 30       	cpi	r24, 0x08	; 8
 8ec:	99 f0       	breq	.+38     	; 0x914 <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 8ee:	89 30       	cpi	r24, 0x09	; 9
 8f0:	31 f4       	brne	.+12     	; 0x8fe <usbPoll+0x12c>
        usbConfiguration = value;
 8f2:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 8f6:	23 e8       	ldi	r18, 0x83	; 131
 8f8:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	16 c0       	rjmp	.+44     	; 0x92a <usbPoll+0x158>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 8fe:	8a 30       	cpi	r24, 0x0A	; 10
 900:	69 f0       	breq	.+26     	; 0x91c <usbPoll+0x14a>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 902:	8b 30       	cpi	r24, 0x0B	; 11
 904:	79 f4       	brne	.+30     	; 0x924 <usbPoll+0x152>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 906:	8b e4       	ldi	r24, 0x4B	; 75
 908:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 90c:	23 e8       	ldi	r18, 0x83	; 131
 90e:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	0b c0       	rjmp	.+22     	; 0x92a <usbPoll+0x158>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 914:	29 e9       	ldi	r18, 0x99	; 153
 916:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	07 c0       	rjmp	.+14     	; 0x92a <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 91c:	23 e8       	ldi	r18, 0x83	; 131
 91e:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	03 c0       	rjmp	.+6      	; 0x92a <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 924:	23 e8       	ldi	r18, 0x83	; 131
 926:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 928:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 92a:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <usbMsgPtr+0x1>
 92e:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 932:	9f 81       	ldd	r25, Y+7	; 0x07
 934:	91 11       	cpse	r25, r1
 936:	04 c0       	rjmp	.+8      	; 0x940 <usbPoll+0x16e>
 938:	9e 81       	ldd	r25, Y+6	; 0x06
 93a:	98 17       	cp	r25, r24
 93c:	08 f4       	brcc	.+2      	; 0x940 <usbPoll+0x16e>
 93e:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 940:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 944:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 948:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <usbTxLen>
 94c:	84 ff       	sbrs	r24, 4
 94e:	4b c0       	rjmp	.+150    	; 0x9e6 <usbPoll+0x214>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 950:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <usbMsgLen>
 954:	8f 3f       	cpi	r24, 0xFF	; 255
 956:	09 f4       	brne	.+2      	; 0x95a <usbPoll+0x188>
 958:	46 c0       	rjmp	.+140    	; 0x9e6 <usbPoll+0x214>
 95a:	c8 2f       	mov	r28, r24
 95c:	89 30       	cpi	r24, 0x09	; 9
 95e:	08 f0       	brcs	.+2      	; 0x962 <usbPoll+0x190>
 960:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 962:	8c 1b       	sub	r24, r28
 964:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 968:	ea e7       	ldi	r30, 0x7A	; 122
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	90 81       	ld	r25, Z
 96e:	88 e8       	ldi	r24, 0x88	; 136
 970:	89 27       	eor	r24, r25
 972:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 974:	cc 23       	and	r28, r28
 976:	09 f4       	brne	.+2      	; 0x97a <usbPoll+0x1a8>
 978:	44 c0       	rjmp	.+136    	; 0xa02 <usbPoll+0x230>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 97a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <usbMsgPtr>
 97e:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 982:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <usbMsgFlags>
 986:	86 ff       	sbrs	r24, 6
 988:	10 c0       	rjmp	.+32     	; 0x9aa <usbPoll+0x1d8>
 98a:	ab e7       	ldi	r26, 0x7B	; 123
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	f9 01       	movw	r30, r18
 990:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 992:	94 91       	lpm	r25, Z
                    *data++ = c;
 994:	9d 93       	st	X+, r25
                    r++;
 996:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 998:	81 50       	subi	r24, 0x01	; 1
 99a:	d9 f7       	brne	.-10     	; 0x992 <usbPoll+0x1c0>
 99c:	2f 5f       	subi	r18, 0xFF	; 255
 99e:	3f 4f       	sbci	r19, 0xFF	; 255
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	8c 0f       	add	r24, r28
 9a4:	28 0f       	add	r18, r24
 9a6:	31 1d       	adc	r19, r1
 9a8:	0e c0       	rjmp	.+28     	; 0x9c6 <usbPoll+0x1f4>
 9aa:	ab e7       	ldi	r26, 0x7B	; 123
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 9ae:	f9 01       	movw	r30, r18
 9b0:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 9b2:	91 91       	ld	r25, Z+
 9b4:	9d 93       	st	X+, r25
                    r++;
                }while(--i);
 9b6:	81 50       	subi	r24, 0x01	; 1
 9b8:	e1 f7       	brne	.-8      	; 0x9b2 <usbPoll+0x1e0>
 9ba:	2f 5f       	subi	r18, 0xFF	; 255
 9bc:	3f 4f       	sbci	r19, 0xFF	; 255
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	8c 0f       	add	r24, r28
 9c2:	28 0f       	add	r18, r24
 9c4:	31 1d       	adc	r19, r1
            }
            usbMsgPtr = r;
 9c6:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <usbMsgPtr+0x1>
 9ca:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 9ce:	6c 2f       	mov	r22, r28
 9d0:	8b e7       	ldi	r24, 0x7B	; 123
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	9e db       	rcall	.-2244   	; 0x112 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 9d6:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 9d8:	cc 30       	cpi	r28, 0x0C	; 12
 9da:	18 f4       	brcc	.+6      	; 0x9e2 <usbPoll+0x210>
            usbMsgLen = USB_NO_MSG;
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <usbMsgLen>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 9e2:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 9e6:	80 b3       	in	r24, 0x10	; 16
 9e8:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
 9ea:	89 f4       	brne	.+34     	; 0xa0e <usbPoll+0x23c>
 9ec:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 9ee:	80 b3       	in	r24, 0x10	; 16
 9f0:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
 9f2:	69 f4       	brne	.+26     	; 0xa0e <usbPoll+0x23c>
 9f4:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 9f6:	d9 f7       	brne	.-10     	; 0x9ee <usbPoll+0x21c>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 9f8:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 9fc:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <usbDeviceAddr>
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <usbPoll+0x23c>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 a02:	6c 2f       	mov	r22, r28
 a04:	8b e7       	ldi	r24, 0x7B	; 123
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	84 db       	rcall	.-2296   	; 0x112 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 a0a:	cc 5f       	subi	r28, 0xFC	; 252
 a0c:	e7 cf       	rjmp	.-50     	; 0x9dc <usbPoll+0x20a>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	08 95       	ret

00000a14 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 a14:	85 b7       	in	r24, 0x35	; 53
 a16:	82 60       	ori	r24, 0x02	; 2
 a18:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 a1a:	8b b7       	in	r24, 0x3b	; 59
 a1c:	80 64       	ori	r24, 0x40	; 64
 a1e:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 a20:	e5 e8       	ldi	r30, 0x85	; 133
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	8b e4       	ldi	r24, 0x4B	; 75
 a26:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 a28:	8a e5       	ldi	r24, 0x5A	; 90
 a2a:	80 83       	st	Z, r24
 a2c:	08 95       	ret

00000a2e <__subsf3>:
 a2e:	50 58       	subi	r21, 0x80	; 128

00000a30 <__addsf3>:
 a30:	bb 27       	eor	r27, r27
 a32:	aa 27       	eor	r26, r26
 a34:	0e d0       	rcall	.+28     	; 0xa52 <__addsf3x>
 a36:	e5 c0       	rjmp	.+458    	; 0xc02 <__fp_round>
 a38:	d6 d0       	rcall	.+428    	; 0xbe6 <__fp_pscA>
 a3a:	30 f0       	brcs	.+12     	; 0xa48 <__addsf3+0x18>
 a3c:	db d0       	rcall	.+438    	; 0xbf4 <__fp_pscB>
 a3e:	20 f0       	brcs	.+8      	; 0xa48 <__addsf3+0x18>
 a40:	31 f4       	brne	.+12     	; 0xa4e <__addsf3+0x1e>
 a42:	9f 3f       	cpi	r25, 0xFF	; 255
 a44:	11 f4       	brne	.+4      	; 0xa4a <__addsf3+0x1a>
 a46:	1e f4       	brtc	.+6      	; 0xa4e <__addsf3+0x1e>
 a48:	cb c0       	rjmp	.+406    	; 0xbe0 <__fp_nan>
 a4a:	0e f4       	brtc	.+2      	; 0xa4e <__addsf3+0x1e>
 a4c:	e0 95       	com	r30
 a4e:	e7 fb       	bst	r30, 7
 a50:	c1 c0       	rjmp	.+386    	; 0xbd4 <__fp_inf>

00000a52 <__addsf3x>:
 a52:	e9 2f       	mov	r30, r25
 a54:	e7 d0       	rcall	.+462    	; 0xc24 <__fp_split3>
 a56:	80 f3       	brcs	.-32     	; 0xa38 <__addsf3+0x8>
 a58:	ba 17       	cp	r27, r26
 a5a:	62 07       	cpc	r22, r18
 a5c:	73 07       	cpc	r23, r19
 a5e:	84 07       	cpc	r24, r20
 a60:	95 07       	cpc	r25, r21
 a62:	18 f0       	brcs	.+6      	; 0xa6a <__addsf3x+0x18>
 a64:	71 f4       	brne	.+28     	; 0xa82 <__addsf3x+0x30>
 a66:	9e f5       	brtc	.+102    	; 0xace <__addsf3x+0x7c>
 a68:	ff c0       	rjmp	.+510    	; 0xc68 <__fp_zero>
 a6a:	0e f4       	brtc	.+2      	; 0xa6e <__addsf3x+0x1c>
 a6c:	e0 95       	com	r30
 a6e:	0b 2e       	mov	r0, r27
 a70:	ba 2f       	mov	r27, r26
 a72:	a0 2d       	mov	r26, r0
 a74:	0b 01       	movw	r0, r22
 a76:	b9 01       	movw	r22, r18
 a78:	90 01       	movw	r18, r0
 a7a:	0c 01       	movw	r0, r24
 a7c:	ca 01       	movw	r24, r20
 a7e:	a0 01       	movw	r20, r0
 a80:	11 24       	eor	r1, r1
 a82:	ff 27       	eor	r31, r31
 a84:	59 1b       	sub	r21, r25
 a86:	99 f0       	breq	.+38     	; 0xaae <__addsf3x+0x5c>
 a88:	59 3f       	cpi	r21, 0xF9	; 249
 a8a:	50 f4       	brcc	.+20     	; 0xaa0 <__addsf3x+0x4e>
 a8c:	50 3e       	cpi	r21, 0xE0	; 224
 a8e:	68 f1       	brcs	.+90     	; 0xaea <__addsf3x+0x98>
 a90:	1a 16       	cp	r1, r26
 a92:	f0 40       	sbci	r31, 0x00	; 0
 a94:	a2 2f       	mov	r26, r18
 a96:	23 2f       	mov	r18, r19
 a98:	34 2f       	mov	r19, r20
 a9a:	44 27       	eor	r20, r20
 a9c:	58 5f       	subi	r21, 0xF8	; 248
 a9e:	f3 cf       	rjmp	.-26     	; 0xa86 <__addsf3x+0x34>
 aa0:	46 95       	lsr	r20
 aa2:	37 95       	ror	r19
 aa4:	27 95       	ror	r18
 aa6:	a7 95       	ror	r26
 aa8:	f0 40       	sbci	r31, 0x00	; 0
 aaa:	53 95       	inc	r21
 aac:	c9 f7       	brne	.-14     	; 0xaa0 <__addsf3x+0x4e>
 aae:	7e f4       	brtc	.+30     	; 0xace <__addsf3x+0x7c>
 ab0:	1f 16       	cp	r1, r31
 ab2:	ba 0b       	sbc	r27, r26
 ab4:	62 0b       	sbc	r22, r18
 ab6:	73 0b       	sbc	r23, r19
 ab8:	84 0b       	sbc	r24, r20
 aba:	ba f0       	brmi	.+46     	; 0xaea <__addsf3x+0x98>
 abc:	91 50       	subi	r25, 0x01	; 1
 abe:	a1 f0       	breq	.+40     	; 0xae8 <__addsf3x+0x96>
 ac0:	ff 0f       	add	r31, r31
 ac2:	bb 1f       	adc	r27, r27
 ac4:	66 1f       	adc	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	c2 f7       	brpl	.-16     	; 0xabc <__addsf3x+0x6a>
 acc:	0e c0       	rjmp	.+28     	; 0xaea <__addsf3x+0x98>
 ace:	ba 0f       	add	r27, r26
 ad0:	62 1f       	adc	r22, r18
 ad2:	73 1f       	adc	r23, r19
 ad4:	84 1f       	adc	r24, r20
 ad6:	48 f4       	brcc	.+18     	; 0xaea <__addsf3x+0x98>
 ad8:	87 95       	ror	r24
 ada:	77 95       	ror	r23
 adc:	67 95       	ror	r22
 ade:	b7 95       	ror	r27
 ae0:	f7 95       	ror	r31
 ae2:	9e 3f       	cpi	r25, 0xFE	; 254
 ae4:	08 f0       	brcs	.+2      	; 0xae8 <__addsf3x+0x96>
 ae6:	b3 cf       	rjmp	.-154    	; 0xa4e <__addsf3+0x1e>
 ae8:	93 95       	inc	r25
 aea:	88 0f       	add	r24, r24
 aec:	08 f0       	brcs	.+2      	; 0xaf0 <__addsf3x+0x9e>
 aee:	99 27       	eor	r25, r25
 af0:	ee 0f       	add	r30, r30
 af2:	97 95       	ror	r25
 af4:	87 95       	ror	r24
 af6:	08 95       	ret

00000af8 <__fixsfsi>:
 af8:	04 d0       	rcall	.+8      	; 0xb02 <__fixunssfsi>
 afa:	68 94       	set
 afc:	b1 11       	cpse	r27, r1
 afe:	b5 c0       	rjmp	.+362    	; 0xc6a <__fp_szero>
 b00:	08 95       	ret

00000b02 <__fixunssfsi>:
 b02:	98 d0       	rcall	.+304    	; 0xc34 <__fp_splitA>
 b04:	88 f0       	brcs	.+34     	; 0xb28 <__fixunssfsi+0x26>
 b06:	9f 57       	subi	r25, 0x7F	; 127
 b08:	90 f0       	brcs	.+36     	; 0xb2e <__fixunssfsi+0x2c>
 b0a:	b9 2f       	mov	r27, r25
 b0c:	99 27       	eor	r25, r25
 b0e:	b7 51       	subi	r27, 0x17	; 23
 b10:	a0 f0       	brcs	.+40     	; 0xb3a <__fixunssfsi+0x38>
 b12:	d1 f0       	breq	.+52     	; 0xb48 <__fixunssfsi+0x46>
 b14:	66 0f       	add	r22, r22
 b16:	77 1f       	adc	r23, r23
 b18:	88 1f       	adc	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	1a f0       	brmi	.+6      	; 0xb24 <__fixunssfsi+0x22>
 b1e:	ba 95       	dec	r27
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__fixunssfsi+0x12>
 b22:	12 c0       	rjmp	.+36     	; 0xb48 <__fixunssfsi+0x46>
 b24:	b1 30       	cpi	r27, 0x01	; 1
 b26:	81 f0       	breq	.+32     	; 0xb48 <__fixunssfsi+0x46>
 b28:	9f d0       	rcall	.+318    	; 0xc68 <__fp_zero>
 b2a:	b1 e0       	ldi	r27, 0x01	; 1
 b2c:	08 95       	ret
 b2e:	9c c0       	rjmp	.+312    	; 0xc68 <__fp_zero>
 b30:	67 2f       	mov	r22, r23
 b32:	78 2f       	mov	r23, r24
 b34:	88 27       	eor	r24, r24
 b36:	b8 5f       	subi	r27, 0xF8	; 248
 b38:	39 f0       	breq	.+14     	; 0xb48 <__fixunssfsi+0x46>
 b3a:	b9 3f       	cpi	r27, 0xF9	; 249
 b3c:	cc f3       	brlt	.-14     	; 0xb30 <__fixunssfsi+0x2e>
 b3e:	86 95       	lsr	r24
 b40:	77 95       	ror	r23
 b42:	67 95       	ror	r22
 b44:	b3 95       	inc	r27
 b46:	d9 f7       	brne	.-10     	; 0xb3e <__fixunssfsi+0x3c>
 b48:	3e f4       	brtc	.+14     	; 0xb58 <__fixunssfsi+0x56>
 b4a:	90 95       	com	r25
 b4c:	80 95       	com	r24
 b4e:	70 95       	com	r23
 b50:	61 95       	neg	r22
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	08 95       	ret

00000b5a <__floatunsisf>:
 b5a:	e8 94       	clt
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <__floatsisf+0x12>

00000b5e <__floatsisf>:
 b5e:	97 fb       	bst	r25, 7
 b60:	3e f4       	brtc	.+14     	; 0xb70 <__floatsisf+0x12>
 b62:	90 95       	com	r25
 b64:	80 95       	com	r24
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	99 23       	and	r25, r25
 b72:	a9 f0       	breq	.+42     	; 0xb9e <__floatsisf+0x40>
 b74:	f9 2f       	mov	r31, r25
 b76:	96 e9       	ldi	r25, 0x96	; 150
 b78:	bb 27       	eor	r27, r27
 b7a:	93 95       	inc	r25
 b7c:	f6 95       	lsr	r31
 b7e:	87 95       	ror	r24
 b80:	77 95       	ror	r23
 b82:	67 95       	ror	r22
 b84:	b7 95       	ror	r27
 b86:	f1 11       	cpse	r31, r1
 b88:	f8 cf       	rjmp	.-16     	; 0xb7a <__floatsisf+0x1c>
 b8a:	fa f4       	brpl	.+62     	; 0xbca <__floatsisf+0x6c>
 b8c:	bb 0f       	add	r27, r27
 b8e:	11 f4       	brne	.+4      	; 0xb94 <__floatsisf+0x36>
 b90:	60 ff       	sbrs	r22, 0
 b92:	1b c0       	rjmp	.+54     	; 0xbca <__floatsisf+0x6c>
 b94:	6f 5f       	subi	r22, 0xFF	; 255
 b96:	7f 4f       	sbci	r23, 0xFF	; 255
 b98:	8f 4f       	sbci	r24, 0xFF	; 255
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	16 c0       	rjmp	.+44     	; 0xbca <__floatsisf+0x6c>
 b9e:	88 23       	and	r24, r24
 ba0:	11 f0       	breq	.+4      	; 0xba6 <__floatsisf+0x48>
 ba2:	96 e9       	ldi	r25, 0x96	; 150
 ba4:	11 c0       	rjmp	.+34     	; 0xbc8 <__floatsisf+0x6a>
 ba6:	77 23       	and	r23, r23
 ba8:	21 f0       	breq	.+8      	; 0xbb2 <__floatsisf+0x54>
 baa:	9e e8       	ldi	r25, 0x8E	; 142
 bac:	87 2f       	mov	r24, r23
 bae:	76 2f       	mov	r23, r22
 bb0:	05 c0       	rjmp	.+10     	; 0xbbc <__floatsisf+0x5e>
 bb2:	66 23       	and	r22, r22
 bb4:	71 f0       	breq	.+28     	; 0xbd2 <__floatsisf+0x74>
 bb6:	96 e8       	ldi	r25, 0x86	; 134
 bb8:	86 2f       	mov	r24, r22
 bba:	70 e0       	ldi	r23, 0x00	; 0
 bbc:	60 e0       	ldi	r22, 0x00	; 0
 bbe:	2a f0       	brmi	.+10     	; 0xbca <__floatsisf+0x6c>
 bc0:	9a 95       	dec	r25
 bc2:	66 0f       	add	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	da f7       	brpl	.-10     	; 0xbc0 <__floatsisf+0x62>
 bca:	88 0f       	add	r24, r24
 bcc:	96 95       	lsr	r25
 bce:	87 95       	ror	r24
 bd0:	97 f9       	bld	r25, 7
 bd2:	08 95       	ret

00000bd4 <__fp_inf>:
 bd4:	97 f9       	bld	r25, 7
 bd6:	9f 67       	ori	r25, 0x7F	; 127
 bd8:	80 e8       	ldi	r24, 0x80	; 128
 bda:	70 e0       	ldi	r23, 0x00	; 0
 bdc:	60 e0       	ldi	r22, 0x00	; 0
 bde:	08 95       	ret

00000be0 <__fp_nan>:
 be0:	9f ef       	ldi	r25, 0xFF	; 255
 be2:	80 ec       	ldi	r24, 0xC0	; 192
 be4:	08 95       	ret

00000be6 <__fp_pscA>:
 be6:	00 24       	eor	r0, r0
 be8:	0a 94       	dec	r0
 bea:	16 16       	cp	r1, r22
 bec:	17 06       	cpc	r1, r23
 bee:	18 06       	cpc	r1, r24
 bf0:	09 06       	cpc	r0, r25
 bf2:	08 95       	ret

00000bf4 <__fp_pscB>:
 bf4:	00 24       	eor	r0, r0
 bf6:	0a 94       	dec	r0
 bf8:	12 16       	cp	r1, r18
 bfa:	13 06       	cpc	r1, r19
 bfc:	14 06       	cpc	r1, r20
 bfe:	05 06       	cpc	r0, r21
 c00:	08 95       	ret

00000c02 <__fp_round>:
 c02:	09 2e       	mov	r0, r25
 c04:	03 94       	inc	r0
 c06:	00 0c       	add	r0, r0
 c08:	11 f4       	brne	.+4      	; 0xc0e <__fp_round+0xc>
 c0a:	88 23       	and	r24, r24
 c0c:	52 f0       	brmi	.+20     	; 0xc22 <__fp_round+0x20>
 c0e:	bb 0f       	add	r27, r27
 c10:	40 f4       	brcc	.+16     	; 0xc22 <__fp_round+0x20>
 c12:	bf 2b       	or	r27, r31
 c14:	11 f4       	brne	.+4      	; 0xc1a <__fp_round+0x18>
 c16:	60 ff       	sbrs	r22, 0
 c18:	04 c0       	rjmp	.+8      	; 0xc22 <__fp_round+0x20>
 c1a:	6f 5f       	subi	r22, 0xFF	; 255
 c1c:	7f 4f       	sbci	r23, 0xFF	; 255
 c1e:	8f 4f       	sbci	r24, 0xFF	; 255
 c20:	9f 4f       	sbci	r25, 0xFF	; 255
 c22:	08 95       	ret

00000c24 <__fp_split3>:
 c24:	57 fd       	sbrc	r21, 7
 c26:	90 58       	subi	r25, 0x80	; 128
 c28:	44 0f       	add	r20, r20
 c2a:	55 1f       	adc	r21, r21
 c2c:	59 f0       	breq	.+22     	; 0xc44 <__fp_splitA+0x10>
 c2e:	5f 3f       	cpi	r21, 0xFF	; 255
 c30:	71 f0       	breq	.+28     	; 0xc4e <__fp_splitA+0x1a>
 c32:	47 95       	ror	r20

00000c34 <__fp_splitA>:
 c34:	88 0f       	add	r24, r24
 c36:	97 fb       	bst	r25, 7
 c38:	99 1f       	adc	r25, r25
 c3a:	61 f0       	breq	.+24     	; 0xc54 <__fp_splitA+0x20>
 c3c:	9f 3f       	cpi	r25, 0xFF	; 255
 c3e:	79 f0       	breq	.+30     	; 0xc5e <__fp_splitA+0x2a>
 c40:	87 95       	ror	r24
 c42:	08 95       	ret
 c44:	12 16       	cp	r1, r18
 c46:	13 06       	cpc	r1, r19
 c48:	14 06       	cpc	r1, r20
 c4a:	55 1f       	adc	r21, r21
 c4c:	f2 cf       	rjmp	.-28     	; 0xc32 <__fp_split3+0xe>
 c4e:	46 95       	lsr	r20
 c50:	f1 df       	rcall	.-30     	; 0xc34 <__fp_splitA>
 c52:	08 c0       	rjmp	.+16     	; 0xc64 <__fp_splitA+0x30>
 c54:	16 16       	cp	r1, r22
 c56:	17 06       	cpc	r1, r23
 c58:	18 06       	cpc	r1, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	f1 cf       	rjmp	.-30     	; 0xc40 <__fp_splitA+0xc>
 c5e:	86 95       	lsr	r24
 c60:	71 05       	cpc	r23, r1
 c62:	61 05       	cpc	r22, r1
 c64:	08 94       	sec
 c66:	08 95       	ret

00000c68 <__fp_zero>:
 c68:	e8 94       	clt

00000c6a <__fp_szero>:
 c6a:	bb 27       	eor	r27, r27
 c6c:	66 27       	eor	r22, r22
 c6e:	77 27       	eor	r23, r23
 c70:	cb 01       	movw	r24, r22
 c72:	97 f9       	bld	r25, 7
 c74:	08 95       	ret

00000c76 <__mulsf3>:
 c76:	0b d0       	rcall	.+22     	; 0xc8e <__mulsf3x>
 c78:	c4 cf       	rjmp	.-120    	; 0xc02 <__fp_round>
 c7a:	b5 df       	rcall	.-150    	; 0xbe6 <__fp_pscA>
 c7c:	28 f0       	brcs	.+10     	; 0xc88 <__mulsf3+0x12>
 c7e:	ba df       	rcall	.-140    	; 0xbf4 <__fp_pscB>
 c80:	18 f0       	brcs	.+6      	; 0xc88 <__mulsf3+0x12>
 c82:	95 23       	and	r25, r21
 c84:	09 f0       	breq	.+2      	; 0xc88 <__mulsf3+0x12>
 c86:	a6 cf       	rjmp	.-180    	; 0xbd4 <__fp_inf>
 c88:	ab cf       	rjmp	.-170    	; 0xbe0 <__fp_nan>
 c8a:	11 24       	eor	r1, r1
 c8c:	ee cf       	rjmp	.-36     	; 0xc6a <__fp_szero>

00000c8e <__mulsf3x>:
 c8e:	ca df       	rcall	.-108    	; 0xc24 <__fp_split3>
 c90:	a0 f3       	brcs	.-24     	; 0xc7a <__mulsf3+0x4>

00000c92 <__mulsf3_pse>:
 c92:	95 9f       	mul	r25, r21
 c94:	d1 f3       	breq	.-12     	; 0xc8a <__mulsf3+0x14>
 c96:	95 0f       	add	r25, r21
 c98:	50 e0       	ldi	r21, 0x00	; 0
 c9a:	55 1f       	adc	r21, r21
 c9c:	62 9f       	mul	r22, r18
 c9e:	f0 01       	movw	r30, r0
 ca0:	72 9f       	mul	r23, r18
 ca2:	bb 27       	eor	r27, r27
 ca4:	f0 0d       	add	r31, r0
 ca6:	b1 1d       	adc	r27, r1
 ca8:	63 9f       	mul	r22, r19
 caa:	aa 27       	eor	r26, r26
 cac:	f0 0d       	add	r31, r0
 cae:	b1 1d       	adc	r27, r1
 cb0:	aa 1f       	adc	r26, r26
 cb2:	64 9f       	mul	r22, r20
 cb4:	66 27       	eor	r22, r22
 cb6:	b0 0d       	add	r27, r0
 cb8:	a1 1d       	adc	r26, r1
 cba:	66 1f       	adc	r22, r22
 cbc:	82 9f       	mul	r24, r18
 cbe:	22 27       	eor	r18, r18
 cc0:	b0 0d       	add	r27, r0
 cc2:	a1 1d       	adc	r26, r1
 cc4:	62 1f       	adc	r22, r18
 cc6:	73 9f       	mul	r23, r19
 cc8:	b0 0d       	add	r27, r0
 cca:	a1 1d       	adc	r26, r1
 ccc:	62 1f       	adc	r22, r18
 cce:	83 9f       	mul	r24, r19
 cd0:	a0 0d       	add	r26, r0
 cd2:	61 1d       	adc	r22, r1
 cd4:	22 1f       	adc	r18, r18
 cd6:	74 9f       	mul	r23, r20
 cd8:	33 27       	eor	r19, r19
 cda:	a0 0d       	add	r26, r0
 cdc:	61 1d       	adc	r22, r1
 cde:	23 1f       	adc	r18, r19
 ce0:	84 9f       	mul	r24, r20
 ce2:	60 0d       	add	r22, r0
 ce4:	21 1d       	adc	r18, r1
 ce6:	82 2f       	mov	r24, r18
 ce8:	76 2f       	mov	r23, r22
 cea:	6a 2f       	mov	r22, r26
 cec:	11 24       	eor	r1, r1
 cee:	9f 57       	subi	r25, 0x7F	; 127
 cf0:	50 40       	sbci	r21, 0x00	; 0
 cf2:	8a f0       	brmi	.+34     	; 0xd16 <__mulsf3_pse+0x84>
 cf4:	e1 f0       	breq	.+56     	; 0xd2e <__mulsf3_pse+0x9c>
 cf6:	88 23       	and	r24, r24
 cf8:	4a f0       	brmi	.+18     	; 0xd0c <__mulsf3_pse+0x7a>
 cfa:	ee 0f       	add	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	bb 1f       	adc	r27, r27
 d00:	66 1f       	adc	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	91 50       	subi	r25, 0x01	; 1
 d08:	50 40       	sbci	r21, 0x00	; 0
 d0a:	a9 f7       	brne	.-22     	; 0xcf6 <__mulsf3_pse+0x64>
 d0c:	9e 3f       	cpi	r25, 0xFE	; 254
 d0e:	51 05       	cpc	r21, r1
 d10:	70 f0       	brcs	.+28     	; 0xd2e <__mulsf3_pse+0x9c>
 d12:	60 cf       	rjmp	.-320    	; 0xbd4 <__fp_inf>
 d14:	aa cf       	rjmp	.-172    	; 0xc6a <__fp_szero>
 d16:	5f 3f       	cpi	r21, 0xFF	; 255
 d18:	ec f3       	brlt	.-6      	; 0xd14 <__mulsf3_pse+0x82>
 d1a:	98 3e       	cpi	r25, 0xE8	; 232
 d1c:	dc f3       	brlt	.-10     	; 0xd14 <__mulsf3_pse+0x82>
 d1e:	86 95       	lsr	r24
 d20:	77 95       	ror	r23
 d22:	67 95       	ror	r22
 d24:	b7 95       	ror	r27
 d26:	f7 95       	ror	r31
 d28:	e7 95       	ror	r30
 d2a:	9f 5f       	subi	r25, 0xFF	; 255
 d2c:	c1 f7       	brne	.-16     	; 0xd1e <__mulsf3_pse+0x8c>
 d2e:	fe 2b       	or	r31, r30
 d30:	88 0f       	add	r24, r24
 d32:	91 1d       	adc	r25, r1
 d34:	96 95       	lsr	r25
 d36:	87 95       	ror	r24
 d38:	97 f9       	bld	r25, 7
 d3a:	08 95       	ret

00000d3c <__divmodhi4>:
 d3c:	97 fb       	bst	r25, 7
 d3e:	07 2e       	mov	r0, r23
 d40:	16 f4       	brtc	.+4      	; 0xd46 <__divmodhi4+0xa>
 d42:	00 94       	com	r0
 d44:	06 d0       	rcall	.+12     	; 0xd52 <__divmodhi4_neg1>
 d46:	77 fd       	sbrc	r23, 7
 d48:	08 d0       	rcall	.+16     	; 0xd5a <__divmodhi4_neg2>
 d4a:	0b d0       	rcall	.+22     	; 0xd62 <__udivmodhi4>
 d4c:	07 fc       	sbrc	r0, 7
 d4e:	05 d0       	rcall	.+10     	; 0xd5a <__divmodhi4_neg2>
 d50:	3e f4       	brtc	.+14     	; 0xd60 <__divmodhi4_exit>

00000d52 <__divmodhi4_neg1>:
 d52:	90 95       	com	r25
 d54:	81 95       	neg	r24
 d56:	9f 4f       	sbci	r25, 0xFF	; 255
 d58:	08 95       	ret

00000d5a <__divmodhi4_neg2>:
 d5a:	70 95       	com	r23
 d5c:	61 95       	neg	r22
 d5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000d60 <__divmodhi4_exit>:
 d60:	08 95       	ret

00000d62 <__udivmodhi4>:
 d62:	aa 1b       	sub	r26, r26
 d64:	bb 1b       	sub	r27, r27
 d66:	51 e1       	ldi	r21, 0x11	; 17
 d68:	07 c0       	rjmp	.+14     	; 0xd78 <__udivmodhi4_ep>

00000d6a <__udivmodhi4_loop>:
 d6a:	aa 1f       	adc	r26, r26
 d6c:	bb 1f       	adc	r27, r27
 d6e:	a6 17       	cp	r26, r22
 d70:	b7 07       	cpc	r27, r23
 d72:	10 f0       	brcs	.+4      	; 0xd78 <__udivmodhi4_ep>
 d74:	a6 1b       	sub	r26, r22
 d76:	b7 0b       	sbc	r27, r23

00000d78 <__udivmodhi4_ep>:
 d78:	88 1f       	adc	r24, r24
 d7a:	99 1f       	adc	r25, r25
 d7c:	5a 95       	dec	r21
 d7e:	a9 f7       	brne	.-22     	; 0xd6a <__udivmodhi4_loop>
 d80:	80 95       	com	r24
 d82:	90 95       	com	r25
 d84:	bc 01       	movw	r22, r24
 d86:	cd 01       	movw	r24, r26
 d88:	08 95       	ret

00000d8a <_exit>:
 d8a:	f8 94       	cli

00000d8c <__stop_program>:
 d8c:	ff cf       	rjmp	.-2      	; 0xd8c <__stop_program>
